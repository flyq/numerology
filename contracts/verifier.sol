pragma solidity ^0.4.24;

import "./FastSecp256k1.sol";

contract Verifier {

  function jarl() public returns (bool){
/*
e = '03a6eed4bb507beba20f8f90e7092d700869825820c6fc11d76949fdd31c3c9e81'
v = '023c1520224ec2718f125789aa571c30eef197580d3904a6a7b9d221fa720b07a3'

e1 = '028f9c8b0aeae3573d160d9c7d2c19429bb151ca968cd6e05c4e32e7d6346fd938'
v1 = '02568f041f4f5f1aa1a2e69e6b45ca74a980e01e8a3fec50f3776157d6217a1a70'

e2 = '034bf61aa8f74f63424a9d164265cef9ca3d1ca8cdc1fb0316ac039c343e27d0dd'
v2 = '020715649f4b9f51f65b9d4d28d6098fede1ebda8d4194951b15c63170a12859d0'

z = 'bdd16222276cfdaf9b701993a59c0818cda573143614eeca7128b4885423c1aa'
*/

/*
    (uint8 e_sign, uint256 e_x) = (3, 0xa6eed4bb507beba20f8f90e7092d700869825820c6fc11d76949fdd31c3c9e81);

    (uint8 e1_sign, uint256 e1_x) = (2, 0x8f9c8b0aeae3573d160d9c7d2c19429bb151ca968cd6e05c4e32e7d6346fd938);

    (uint8 e2_sign, uint256 e2_x) = (3, 0x4bf61aa8f74f63424a9d164265cef9ca3d1ca8cdc1fb0316ac039c343e27d0dd);

    uint256 z = 0xbdd16222276cfdaf9b701993a59c0818cda573143614eeca7128b4885423c1aa;

    uint8[3] memory sign = [e_sign, e1_sign, e2_sign];
    uint256[3] memory xcoord = [e_x, e1_x, e2_x];
*/


// (uint256 e_x, uint256 e_y) = (76828902008291123852927592471225026896840129159542961649995543199461581790724, 56747880152442877359480041929398112655824894039542519756839776479967769316072);
// (uint256 e1_x, uint256 e1_y) = (23003209272544902989840086177683618802089572662340315680665399336321613720588, 5875173269722715307624944568162279144117514140665879754483413709574034578005);
// (uint256 e2_x, uint256 e2_y) = (92204819666452577630186600895109639395863314533237299952055030972939295120452, 49028691468845285246042821420678887287518182854750678019159867718610801144632);
// (uint256 v_x, uint256 v_y) = (6448779340272726202907931879024552606446881824004184421628350453009334202974, 23013042630809296712304955371817849601496004973029152245476407817743977475636);
 // (uint256 v1_x, uint256 v1_y) = (82613565887149254156592858717036735481321989600964328033289523261076327845666, 35783201041003520156355876436294871581363685112565905429968137173140178929929);
 // (uint256 v2_x, uint256 v2_y) = (3335666372127016251909922225859123506371104767553369471664557063161672696198, 19181896828939476931959288924723919269592991311210324509196956837786634312370);
// (uint256 u_x, uint256 u_y) = (109743505389736956422343706815535711271056474806867965264242884349072551418394, 41515542897256463165637998922821942219400299669776566567197487891225216017946);
// (uint256 u1_x, uint256 u1_y) = (84308578430075271882149240464394649766102507037125510143755681127773600117256, 87120408027982512648244654335658870002649971834148389745103381596289811150436);
// (uint256 u2_x, uint256 u2_y) = (91017028482034773171805385757889416638102577853745562931839696839255313878669, 92703384452840925448085247238921874069118801617240655544739998899706124273140);
//uint256 z = 29170632128814124718210722662888726723960521240266284364476774971803484430477;
//uint256 h = 56494106360898039718343176947902135063781549649836539568907079060068125842391;

uint256[9] memory xs = [95147983620000833836598638926838565417591690883927084769653755377076107598588, 76744124539543998376673711002857407041142741818026851297373306868928840601655, 57145720036135663488286556745600506644523199163800857869014402491467731381409, 40204226624842535932446290181684088348249516400020962152186852025515627002554, 25848322009464064450919180525380269025194329001617243054514949144261303310800, 55782897230151665859075838049337866949597588287042880053543522143561689335741, 109743505389736956422343706815535711271056474806867965264242884349072551418394, 107333200190049166844662472487136345210507425912593599426636294183456093137115, 65990598533412139064669628144790164251438302247595882509184839598918849242512];
uint256[9] memory ys = [70178582433635092902270099900437647406790644028003264238591512137302409627324, 70671404140726341915202996812649024736838513898052259410749750320198877491684, 108801129082709121037722407375853179351218847920733661960904326655345935442463, 35572066074757240470683181234988968882984939268363401590145424444210926468008, 48474653571380918168790971496150380271448940762787714682415921624596904825605, 83227442652899898531334499726784130663520032013452218144437905010573517267829, 41515542897256463165637998922821942219400299669776566567197487891225216017946, 4706406424082252783429492634141393895560716755651211280207970118186101124351, 104008704708434833096397493666809137711572891892517950271210368917814464607752];
uint256 z = 97476064113324593706654316545116846564317412959958334174760798622442291438448;
//uint256 h = 23076743044030859900750684249730695196193450169730667016757830080314706468342;


// uint256[3] memory xcoord = [e_x, e1_x, e2_x];
// uint256[3] memory ycoord = [e_y, e1_y, e2_y];

    return verify(xs, ys, z);

  }

  //function verify(uint8 e_sign, uint256 e_x, uint8 e1_sign, uint256 e1_x, uint8 e2_sign, uint256 e2_x, uint256 z) public returns (bool){
  function verify(uint256[9] xcoord, uint256[9] ycoord, uint256 z) public returns (bool){

    // uint256[2] memory  p = [xcoord[0], ycoord[0]];
    // uint256[2] memory p1 = [xcoord[1], ycoord[1]];
    // uint256[2] memory p2 = [xcoord[2], ycoord[2]];

    //bytes memory input = hex"03a6eed4bb507beba20f8f90e7092d700869825820c6fc11d76949fdd31c3c9e81028f9c8b0aeae3573d160d9c7d2c19429bb151ca968cd6e05c4e32e7d6346fd938034bf61aa8f74f63424a9d164265cef9ca3d1ca8cdc1fb0316ac039c343e27d0dd023c1520224ec2718f125789aa571c30eef197580d3904a6a7b9d221fa720b07a302568f041f4f5f1aa1a2e69e6b45ca74a980e01e8a3fec50f3776157d6217a1a70020715649f4b9f51f65b9d4d28d6098fede1ebda8d4194951b15c63170a12859d002f2a09f73e56722d7383f18132b08b9bdb57fbec938fdf887645723bcb5679a1a029566538eca818af326ba4a57c0558d9f7524f92d20b69cf3e901374338d0007a02f3f9169d2b28394ed37ec42b9c5d01efa374116f03de027a0f661e3b4113fef3";
    
    // FALLA CON ESTO (no con los anteriores):
    //bytes memory input = hex'03a6eed4bb507beba20f8f90e7092d700869825820c6fc11d76949fdd31c3c9e81028f9c8b0aeae3573d160d9c7d2c19429bb151ca968cd6e05c4e32e7d6346fd938034bf61aa8f74f63424a9d164265cef9ca3d1ca8cdc1fb0316ac039c343e27d0dd023c1520224ec2718f125789aa571c30eef197580d3904a6a7b9d221fa720b07a3';

    //BLAKE2b blakec = new BLAKE2b();
    //BLAKE2b.BLAKE2b_ctx memory ctx;
    /*blakec.blake2b_init();
    blakec.blake2b_update(hex'03a6eed4bb507beba20f8f90e7092d700869825820c6fc11d76949fdd31c3c9e81');
    blakec.blake2b_update(hex'028f9c8b0aeae3573d160d9c7d2c19429bb151ca968cd6e05c4e32e7d6346fd938');
    blakec.blake2b_update(hex'034bf61aa8f74f63424a9d164265cef9ca3d1ca8cdc1fb0316ac039c343e27d0dd');
    blakec.blake2b_update(hex'023c1520224ec2718f125789aa571c30eef197580d3904a6a7b9d221fa720b07a3');
    blakec.blake2b_update(hex'02568f041f4f5f1aa1a2e69e6b45ca74a980e01e8a3fec50f3776157d6217a1a70');
    blakec.blake2b_update(hex'020715649f4b9f51f65b9d4d28d6098fede1ebda8d4194951b15c63170a12859d0');
    blakec.blake2b_update(hex'02f2a09f73e56722d7383f18132b08b9bdb57fbec938fdf887645723bcb5679a1a');
    blakec.blake2b_update(hex'029566538eca818af326ba4a57c0558d9f7524f92d20b69cf3e901374338d0007a');
    blakec.blake2b_update(hex'02f3f9169d2b28394ed37ec42b9c5d01efa374116f03de027a0f661e3b4113fef3');
    
    uint64[8] memory out = blakec.blake2b_finalize();
    return (out[0], out[7]); // == expected_h;
*/
    //(uint256 blake_upper, uint256 blake_lower) = blake(input);
    //uint256 h = 0x08c285be9f5e7c3a2c4f5a09c41976acdc5cb31d054065a0f54cb4bc5a028d51; //hash_to_bn(blake_upper, blake_lower);
    uint256 h = 23076743044030859900750684249730695196193450169730667016757830080314706468342;

    uint256[4] memory k_l = [z, z, h, h];
    uint256[4] memory P_Q = [xcoord[0], ycoord[0], xcoord[1], ycoord[1]];

    // uint[3] memory eq_lhs  = Secp256k1._mul(z, p);

    // uint[3] memory eq_rhs = Secp256k1._mul(h, p1);
    // Secp256k1._addMixedM2001b(eq_rhs, p2);
    
    uint256[3] memory ez_e1h = FastSecp256k1._sim_mul(k_l, P_Q);

    return eq_jacobian(ez_e1h, [xcoord[2], ycoord[2], 1]);

    // TODO: Shamir's trick
    // uint[3] memory e_z  = _mul(z, e);
    // uint[3] memory e1_h = _mul(h, e1);
    
    // uint[3] memory lhs = _add(e_z, e1_h);
    // uint[3] memory rhs = _mul(1, e2);

  }

  function eq_jacobian(uint256[3] memory P, uint256[3] memory Q) public returns(bool){
    // Field size
    uint p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;

    uint256 Q_z_squared = mulmod(Q[2], Q[2], p);
    uint256 P_z_squared = mulmod(P[2], P[2], p);
    uint256 eq_x_lhs = mulmod(P[0], Q_z_squared, p);
    uint256 eq_x_rhs = mulmod(Q[0], P_z_squared, p);

    if (eq_x_lhs != eq_x_rhs){
      return false;
    }

    uint256 Q_z_cubed = mulmod(Q_z_squared, Q[2], p);
    uint256 P_z_cubed = mulmod(P_z_squared, P[2], p);
    uint256 eq_y_lhs = mulmod(P[1], Q_z_cubed, p);
    uint256 eq_y_rhs = mulmod(Q[1], P_z_cubed, p);

    return eq_y_lhs == eq_y_rhs;
    
  }

  // function eq_affine_to_jacobian(uint256[2] memory P_affine, uint256[3] memory Q_jacobian) public returns(bool){
  //   // Field size
  //   uint constant p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;

  //   uint256 Q_z_squared = mulmod(Q_jacobian[2], Q_jacobian[2], p);
  //   uint256 eq_x_rhs = 

  //   uint256 Q_z_cubed = mulmod(Q_z_squared, Q_jacobian[2], p);
  // }

  function hash_to_bn(uint256 upper_half, uint256 lower_half) public returns (uint256){
      uint256 delta = 432420386565659656852420866394968145600;
      uint256 n_minus_1 = 115792089237316195423570985008687907852837564279074904382605163141518161494336;
      
      upper_half = mulmod(upper_half, delta, n_minus_1);
      return 1 + addmod(upper_half, lower_half, n_minus_1);
  } 


  /*

  function blake2b(bytes input) public returns (uint64, uint64){
   BLAKE2b blakeh = new BLAKE2b();
   uint64[8] memory result = blakeh.blake2b(input, "", 64);

   return (result[0], result[7]);

  }

  function blake(bytes input) public returns (uint256, uint256){

   BLAKE2b blakec = new BLAKE2b();
   uint64[8] memory result = blakec.blake2b(input, "", 64);

   uint256 upper = result[0];
   upper = ((2**64) * upper) | result[1];
   upper = ((2**64) * upper) | result[2];
   upper = ((2**64) * upper) | result[3];
   uint256 lower = result[4];
   lower = ((2**64) * lower) | result[5];
   lower = ((2**64) * lower) | result[6];
   lower = ((2**64) * lower) | result[7];

   return (upper, lower);

/*
   blake("abc") = 

   [ BigNumber {
    s: 1,
    e: 76,
    c: 
     [ 8435748,
       67634221525890,
       96765654763970,
       68470538857494,
       92364571728011,
       4399717868241 ] },
  BigNumber {
    s: 1,
    e: 76,
    c: 
     [ 5677899,
       16118943144964,
       54475175241448,
       17205299845906,
       69279152998681,
       73780220156195 ] } ]
*/

  //} 

}

