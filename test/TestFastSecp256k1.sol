pragma solidity ^0.4.2;

import "truffle/Assert.sol";
import "../contracts/FastSecp256k1.sol";

contract TestFastSecp256k1 {

  function testEqJacobian() public {

    uint256 gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;
    uint256 gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;

    uint256[3] memory G = [gx, gy, 1];

    Assert.equal(FastSecp256k1.eq_jacobian(G, G), true, "(gx, gy, 1) != (gx, gy, 1)");

    Assert.equal(FastSecp256k1.eq_jacobian(G, [gx, gy, 2]), false, "(gx, gy, 1) == (gx, gy, 2)");

    uint256[3] memory _3G_a = [5726454693002325744504615879224937090641195997533856518133185097441749801032, 30465733315910832811384596896851271406814174274894972936708357560288818352423, 66156017442994545069917029407362356499253061781520987122418836382606119623594];
    uint256[3] memory _3G_b = [28216391251290707721464832982706805814687820950194043742613772785255587611245, 110090129839246524456372193437225215114818684856101781739663788518581478719626, 34499628904269660561674201530767158034393542375844615658184142552908072257357];

    Assert.equal(FastSecp256k1.eq_jacobian(_3G_a, _3G_b), true, "3G != 3G");

    _3G_b[2] = 23523452345234524;

    Assert.equal(FastSecp256k1.eq_jacobian(_3G_a, _3G_b), false, "(3gx, 3gy, 3gz) == (3gx, 3gy, some other z value)");
  }

  function testAdd2001b() public {

    uint256[3] memory G = [0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8, 1];
    uint256[3] memory G2 = [56576513649176532955305617254616790498672209379484940581393603843805619269570, 39155707150128334349216371677407456506802956851096117747929288260567018884059, 65341020041517633956166170261014086368942546761318486551877808671514674964848];
    uint256[3] memory G3 = [5726454693002325744504615879224937090641195997533856518133185097441749801032, 30465733315910832811384596896851271406814174274894972936708357560288818352423, 66156017442994545069917029407362356499253061781520987122418836382606119623594];

    uint256[3] memory G_plus_G2 = FastSecp256k1._add(G, G2);    

    Assert.equal(FastSecp256k1.eq_jacobian(G3, G_plus_G2), true, "3G != G + 2G");
  }

}